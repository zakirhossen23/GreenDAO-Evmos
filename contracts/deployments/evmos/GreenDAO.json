{
  "address": "0x36fa608fda8F0EDf3cfd3075b3Fc53952B6AC021",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dao_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dao_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "finished",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_ideas_uris",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "goal_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ideas_uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "all_goal_ideas_votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "wallet",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dao_uri",
          "type": "string"
        }
      ],
      "name": "create_dao",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        }
      ],
      "name": "create_goal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_wallet",
          "type": "string"
        }
      ],
      "name": "create_goal_ideas_vote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        }
      ],
      "name": "create_ideas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dao",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        }
      ],
      "name": "dao_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_daos",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_goals",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        }
      ],
      "name": "get_all_goals_by_dao_id",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_ideas",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        }
      ],
      "name": "get_all_ideas_by_goal_id",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        }
      ],
      "name": "get_goal_id_by_goal_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "get_goal_id_from_ideas_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "get_ideas_id_by_ideas_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        }
      ],
      "name": "get_ideas_votes_from_goal",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        }
      ],
      "name": "goal_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        }
      ],
      "name": "ideas_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset_all",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dao_uri",
          "type": "string"
        }
      ],
      "name": "set_dao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        }
      ],
      "name": "set_goal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "set_ideas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa41ebc68323f1b5983be45e979f0e111f50f6a1198c3ecf0ea0baa9ee8c801f",
  "receipt": {
    "to": null,
    "from": "0x32F48d18db5A63D3345Eaee9d9C326a2cC647B80",
    "contractAddress": "0x36fa608fda8F0EDf3cfd3075b3Fc53952B6AC021",
    "transactionIndex": 10,
    "gasUsed": "2008508",
    "logsBloom": "0x
    "blockHash": "0xa9dccf75b477da88333f3169a8cd8fd80cc72dafb6a283b8de4f55675162921b",
    "transactionHash": "0xaa41ebc68323f1b5983be45e979f0e111f50f6a1198c3ecf0ea0baa9ee8c801f",
    "logs": [],
    "blockNumber": 9592935,
    "cumulativeGasUsed": "3253498",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9a15ea3047de92a94c38d1d0544d01a7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dao_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dao_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"finished\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ideas_uris\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goal_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ideas_uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_goal_ideas_votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"wallet\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_uri\",\"type\":\"string\"}],\"name\":\"create_dao\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"create_goal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_wallet\",\"type\":\"string\"}],\"name\":\"create_goal_ideas_vote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"create_ideas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"dao_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_daos\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_goals\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"get_all_goals_by_dao_id\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_ideas\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"get_all_ideas_by_goal_id\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"}],\"name\":\"get_goal_id_by_goal_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"get_goal_id_from_ideas_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"get_ideas_id_by_ideas_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"}],\"name\":\"get_ideas_votes_from_goal\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"goal_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"}],\"name\":\"ideas_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset_all\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_uri\",\"type\":\"string\"}],\"name\":\"set_dao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"}],\"name\":\"set_goal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"set_ideas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GreenDAO.sol\":\"GreenDAO\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/GreenDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract GreenDAO {\\r\\n    struct dao_uri_struct {\\r\\n        string dao_wallet;\\r\\n        string dao_uri;\\r\\n        string finished;\\r\\n    }\\r\\n    struct goal_uri_struct {\\r\\n        uint256 dao_id;\\r\\n        string goal_uri;\\r\\n    }\\r\\n\\r\\n    struct ideas_uri_struct {\\r\\n        uint256 goal_id;\\r\\n        string ideas_uri;\\r\\n    }\\r\\n\\r\\n    struct goal_ideas_votes_struct {\\r\\n        uint256 goal_id;\\r\\n        uint256 ideas_id;\\r\\n        string wallet;\\r\\n    }\\r\\n\\r\\n    uint256 private _dao_ids;\\r\\n    uint256 private _goal_ids;\\r\\n    uint256 private _ideas_ids;\\r\\n    uint256 private _ideas_vote_ids;\\r\\n    mapping(uint256 => dao_uri_struct) public _dao_uris;                        //_dao_ids          => (Dao)    Dao Wallet + Dao URI   + Finished\\r\\n    mapping(uint256 => goal_uri_struct) private _goal_uris;                     //_goal_ids         => (Goal)   Dao ID + Goal URI\\r\\n    mapping(uint256 => ideas_uri_struct) public _ideas_uris;                    //_ideas_ids        => (Ideas)  Goal ID + Ideas URI\\r\\n    mapping(uint256 => goal_ideas_votes_struct) public all_goal_ideas_votes;    //_ideas_vote_ids   => (Vote)   Goal ID + Ideas ID + Wallet\\r\\n\\r\\n    \\r\\n\\r\\n    //Daos\\r\\n    function create_dao(string memory _dao_wallet, string memory _dao_uri)\\r\\n        public\\r\\n        returns (uint256)\\r\\n    {\\r\\n        //Create Dao into _dao_uris\\r\\n        _dao_uris[_dao_ids] = dao_uri_struct(_dao_wallet, _dao_uri, \\\"False\\\");\\r\\n        _dao_ids++;\\r\\n\\r\\n        return _dao_ids;\\r\\n    }\\r\\n\\r\\n    function set_dao(\\r\\n        uint256 _dao_id,\\r\\n        string memory _dao_wallet,\\r\\n        string memory _dao_uri\\r\\n    ) public {\\r\\n        //Set Dao of wallet and uri\\r\\n        _dao_uris[_dao_id].dao_wallet = _dao_wallet;\\r\\n        _dao_uris[_dao_id].dao_uri = _dao_uri;\\r\\n    }\\r\\n\\r\\n    function get_all_daos() public view returns (string[] memory) {\\r\\n        //Getting all doas\\r\\n        string[] memory _StoreInfo = new string[](_dao_ids);\\r\\n        for (uint256 i = 0; i < _dao_ids; i++) {\\r\\n            _StoreInfo[i] = _dao_uris[i].dao_uri;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n\\r\\n    function dao_uri(uint256 _dao_id) public view returns (string memory) {\\r\\n        //Getting one dao URI\\r\\n        return _dao_uris[_dao_id].dao_uri;\\r\\n    }\\r\\n\\r\\n    //Goals\\r\\n    function create_goal(string memory _goal_uri, uint256 _dao_id) public returns (uint256)\\r\\n    {\\r\\n        //Create goal into _goal_uris\\r\\n        _goal_uris[_goal_ids] = goal_uri_struct(_dao_id, _goal_uri);\\r\\n        _goal_ids++;\\r\\n\\r\\n        return _goal_ids;\\r\\n    }\\r\\n\\r\\n    function set_goal(uint256 _goal_id, string memory _goal_uri) public {\\r\\n        //Set goal uri\\r\\n        _goal_uris[_goal_id].goal_uri = _goal_uri;\\r\\n    }\\r\\n\\r\\n    function get_all_goals() public view returns (string[] memory) {\\r\\n        //Getting all goals\\r\\n        string[] memory _StoreInfo = new string[](_goal_ids);\\r\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n            _StoreInfo[i] = _goal_uris[i].goal_uri;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    function get_all_goals_by_dao_id(uint256 _dao_id) public view returns (string[] memory) {\\r\\n        //Getting all goals by dao id\\r\\n        string[] memory _StoreInfo = new string[](_goal_ids);\\r\\n        uint256 _store_id;\\r\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n          if (_goal_uris[i].dao_id == _dao_id){\\r\\n            _StoreInfo[_store_id] = _goal_uris[i].goal_uri;\\r\\n            _store_id++;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function get_goal_id_by_goal_uri(string memory _goal_uri) public view returns (uint256) {\\r\\n        //Getting goal id by uri\\r\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n          if (keccak256(bytes(_goal_uris[i].goal_uri)) == keccak256(bytes(_goal_uri))) return  i;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function goal_uri(uint256 _goal_id) public view returns (string memory) {\\r\\n        //Getting one goal URI\\r\\n        return _goal_uris[_goal_id].goal_uri;\\r\\n    }\\r\\n\\r\\n\\r\\n    //Ideas\\r\\n    function create_ideas(string memory _ideas_uri, uint256 _goal_id) public returns (uint256)\\r\\n    {\\r\\n        //Create ideas into _ideas_uris\\r\\n        _ideas_uris[_ideas_ids] = ideas_uri_struct(_goal_id, _ideas_uri);\\r\\n        _ideas_ids++;\\r\\n\\r\\n        return _ideas_ids;\\r\\n    }\\r\\n\\r\\n    function set_ideas(uint256 _ideas_id, string memory _ideas_uri) public {\\r\\n        //Set ideas uri\\r\\n        _ideas_uris[_ideas_id].ideas_uri = _ideas_uri;\\r\\n    }\\r\\n\\r\\n    function get_all_ideas() public view returns (string[] memory) {\\r\\n        //Getting all ideas\\r\\n        string[] memory _StoreInfo = new string[](_ideas_ids);\\r\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n            _StoreInfo[i] = _ideas_uris[i].ideas_uri;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    function get_all_ideas_by_goal_id(uint256 _goal_id) public view returns (string[] memory) {\\r\\n        //Getting all ideas by goal id\\r\\n        string[] memory _StoreInfo = new string[](_ideas_ids);        \\r\\n        uint256 _store_id;\\r\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n          if (_ideas_uris[i].goal_id == _goal_id)\\r\\n            _StoreInfo[_store_id] = _ideas_uris[i].ideas_uri;\\r\\n            _store_id++;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function get_ideas_id_by_ideas_uri(string memory _ideas_uri) public view returns (uint256) {\\r\\n        //Getting ideas id by uri\\r\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n          if (keccak256(bytes(_ideas_uris[i].ideas_uri)) == keccak256(bytes(_ideas_uri))) return  i;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function get_goal_id_from_ideas_uri(string memory _ideas_uri) public view returns (uint256) {\\r\\n     //Getting ideas id by uri\\r\\n     for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n       if (keccak256(bytes(_ideas_uris[i].ideas_uri)) == keccak256(bytes(_ideas_uri))) return  _ideas_uris[i].goal_id;\\r\\n     }\\r\\n\\r\\n     return 0;\\r\\n    }\\r\\n\\r\\n\\r\\n    function ideas_uri(uint256 _ideas_id) public view returns (string memory) {\\r\\n        //Getting one ideas URI\\r\\n        return _ideas_uris[_ideas_id].ideas_uri;\\r\\n    }\\r\\n\\r\\n\\r\\n    //Votes\\r\\n    function create_goal_ideas_vote(uint256 _goal_id, uint256 _ideas_id,string memory _wallet) public returns (uint256)\\r\\n    {\\r\\n        //Create votes into all_goal_ideas_votes\\r\\n        all_goal_ideas_votes[_ideas_vote_ids] = goal_ideas_votes_struct(_goal_id, _ideas_id,_wallet);\\r\\n        _ideas_vote_ids++;\\r\\n\\r\\n        return _ideas_vote_ids;\\r\\n    }\\r\\n\\r\\n\\r\\n   function get_ideas_votes_from_goal(uint256 _goal_id, uint256 _ideas_id) public view returns (string[] memory)\\r\\n    {\\r\\n        //gets all ideas votes from goal\\r\\n        string[] memory _StoreInfo = new string[](_ideas_vote_ids);\\r\\n        uint256 _store_id;\\r\\n        for (uint256 i = 0; i < _ideas_vote_ids; i++) {\\r\\n          if (all_goal_ideas_votes[i].goal_id == _goal_id && all_goal_ideas_votes[i].ideas_id == _ideas_id )\\r\\n            _StoreInfo[_store_id] = all_goal_ideas_votes[i].wallet;\\r\\n            _store_id++;\\r\\n        }\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    function reset_all() public {\\r\\n      _dao_ids = 0;\\r\\n      _goal_ids = 0;\\r\\n      _ideas_ids = 0;\\r\\n      _ideas_vote_ids = 0;\\r\\n      for (uint256 i = 0; i < _dao_ids; i++)            delete _dao_uris[i];\\r\\n      for (uint256 i = 0; i < _goal_ids; i++)           delete _goal_uris[i];\\r\\n      for (uint256 i = 0; i < _ideas_ids; i++)          delete _ideas_uris[i];\\r\\n      for (uint256 i = 0; i < _ideas_vote_ids; i++)     delete all_goal_ideas_votes[i];    \\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    //Test\\r\\n    function dao() public returns (string[] memory) {\\r\\n        create_dao(\\\"wallet #1\\\", \\\"DAO metadata #1\\\");\\r\\n        create_dao(\\\"wallet #2\\\", \\\"DAO metadata #2\\\");\\r\\n        return get_all_daos();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x066dd5a59ba16bb69acb30478532ae046e187d73eb3406a80ea0e0b3ca1f49b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061236e806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806382fcc732116100c3578063b16060a61161007c578063b16060a614610478578063c04e743014610482578063c04fe9781461049e578063c29595c5146104bc578063c4c2e364146104d8578063e32acc1a1461050857610158565b806382fcc7321461037e578063881de858146103ae5780638d3d2595146103ca57806397ee7606146103fa578063a1ca917814610418578063aa4cdf2a1461044857610158565b80632d9cb1ab116101155780632d9cb1ab1461026f5780634162169f1461029f578063468d0c80146102bd5780634be7adb5146102ee5780635d907da11461031e57806371085cab1461034e57610158565b8063109ac9701461015d578063131d44f21461018d5780631ba44c4c146101bd5780631e9ac9f5146101ef57806327a568b91461021f57806329b56f6014610251575b600080fd5b61017760048036038101906101729190611bf0565b610538565b6040516101849190611f53565b60405180910390f35b6101a760048036038101906101a29190611bf0565b6106a8565b6040516101b49190611f53565b60405180910390f35b6101d760048036038101906101d29190611bf0565b610818565b6040516101e69392919061202e565b60405180910390f35b61020960048036038101906102049190611ad3565b6108ca565b6040516102169190611fe3565b60405180910390f35b61023960048036038101906102349190611bf0565b61093c565b60405161024893929190611f97565b60405180910390f35b610259610afe565b6040516102669190611f53565b60405180910390f35b61028960048036038101906102849190611b94565b610c39565b6040516102969190611fe3565b60405180910390f35b6102a7610cb2565b6040516102b49190611f53565b60405180910390f35b6102d760048036038101906102d29190611bf0565b610dab565b6040516102e5929190611ffe565b60405180910390f35b61030860048036038101906103039190611d04565b610e57565b6040516103159190611f53565b60405180910390f35b61033860048036038101906103339190611bf0565b610fe9565b6040516103459190611f75565b60405180910390f35b61036860048036038101906103639190611b94565b611091565b6040516103759190611fe3565b60405180910390f35b61039860048036038101906103939190611d44565b61110a565b6040516103a59190611fe3565b60405180910390f35b6103c860048036038101906103c39190611c79565b611194565b005b6103e460048036038101906103df9190611bf0565b6111ef565b6040516103f19190611f75565b60405180910390f35b610402611297565b60405161040f9190611f53565b60405180910390f35b610432600480360381019061042d9190611ad3565b6113d2565b60405161043f9190611fe3565b60405180910390f35b610462600480360381019061045d9190611ad3565b611444565b60405161046f9190611fe3565b60405180910390f35b6104806114cc565b005b61049c60048036038101906104979190611c1d565b611649565b005b6104a6611678565b6040516104b39190611f53565b60405180910390f35b6104d660048036038101906104d19190611c1d565b6117b2565b005b6104f260048036038101906104ed9190611b1c565b6117e1565b6040516104ff9190611fe3565b60405180910390f35b610522600480360381019061051d9190611bf0565b6118c3565b60405161052f9190611f75565b60405180910390f35b6060600060015467ffffffffffffffff811115610558576105576122cd565b5b60405190808252806020026020018201604052801561058b57816020015b60608152602001906001900390816105765790505b509050600080600090505b60015481101561069d57846005600083815260200190815260200160002060000154141561068a576005600082815260200190815260200160002060010180546105df90612194565b80601f016020809104026020016040519081016040528092919081815260200182805461060b90612194565b80156106585780601f1061062d57610100808354040283529160200191610658565b820191906000526020600020905b81548152906001019060200180831161063b57829003601f168201915b50505050508383815181106106705761066f61229e565b5b60200260200101819052508180610686906121f7565b9250505b8080610695906121f7565b915050610596565b508192505050919050565b6060600060025467ffffffffffffffff8111156106c8576106c76122cd565b5b6040519080825280602002602001820160405280156106fb57816020015b60608152602001906001900390816106e65790505b509050600080600090505b60025481101561080d5784600660008381526020019081526020016000206000015414156107ec5760066000828152602001908152602001600020600101805461074f90612194565b80601f016020809104026020016040519081016040528092919081815260200182805461077b90612194565b80156107c85780601f1061079d576101008083540402835291602001916107c8565b820191906000526020600020905b8154815290600101906020018083116107ab57829003601f168201915b50505050508383815181106107e0576107df61229e565b5b60200260200101819052505b81806107f7906121f7565b9250508080610805906121f7565b915050610706565b508192505050919050565b600760205280600052604060002060009150905080600001549080600101549080600201805461084790612194565b80601f016020809104026020016040519081016040528092919081815260200182805461087390612194565b80156108c05780601f10610895576101008083540402835291602001916108c0565b820191906000526020600020905b8154815290600101906020018083116108a357829003601f168201915b5050505050905083565b600080600090505b600154811015610931578280519060200120600560008381526020019081526020016000206001016040516109079190611f3c565b6040518091039020141561091e5780915050610937565b8080610929906121f7565b9150506108d2565b50600090505b919050565b600460205280600052604060002060009150905080600001805461095f90612194565b80601f016020809104026020016040519081016040528092919081815260200182805461098b90612194565b80156109d85780601f106109ad576101008083540402835291602001916109d8565b820191906000526020600020905b8154815290600101906020018083116109bb57829003601f168201915b5050505050908060010180546109ed90612194565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1990612194565b8015610a665780601f10610a3b57610100808354040283529160200191610a66565b820191906000526020600020905b815481529060010190602001808311610a4957829003601f168201915b505050505090806002018054610a7b90612194565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa790612194565b8015610af45780601f10610ac957610100808354040283529160200191610af4565b820191906000526020600020905b815481529060010190602001808311610ad757829003601f168201915b5050505050905083565b6060600060015467ffffffffffffffff811115610b1e57610b1d6122cd565b5b604051908082528060200260200182016040528015610b5157816020015b6060815260200190600190039081610b3c5790505b50905060005b600154811015610c3157600560008281526020019081526020016000206001018054610b8290612194565b80601f0160208091040260200160405190810160405280929190818152602001828054610bae90612194565b8015610bfb5780601f10610bd057610100808354040283529160200191610bfb565b820191906000526020600020905b815481529060010190602001808311610bde57829003601f168201915b5050505050828281518110610c1357610c1261229e565b5b60200260200101819052508080610c29906121f7565b915050610b57565b508091505090565b6000604051806040016040528083815260200184815250600660006002548152602001908152602001600020600082015181600001556020820151816001019080519060200190610c8b92919061196b565b5090505060026000815480929190610ca2906121f7565b9190505550600254905092915050565b6060610d286040518060400160405280600981526020017f77616c6c657420233100000000000000000000000000000000000000000000008152506040518060400160405280600f81526020017f44414f206d6574616461746120233100000000000000000000000000000000008152506117e1565b50610d9d6040518060400160405280600981526020017f77616c6c657420233200000000000000000000000000000000000000000000008152506040518060400160405280600f81526020017f44414f206d6574616461746120233200000000000000000000000000000000008152506117e1565b50610da6611678565b905090565b6006602052806000526040600020600091509050806000015490806001018054610dd490612194565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0090612194565b8015610e4d5780601f10610e2257610100808354040283529160200191610e4d565b820191906000526020600020905b815481529060010190602001808311610e3057829003601f168201915b5050505050905082565b6060600060035467ffffffffffffffff811115610e7757610e766122cd565b5b604051908082528060200260200182016040528015610eaa57816020015b6060815260200190600190039081610e955790505b509050600080600090505b600354811015610fdd57856007600083815260200190815260200160002060000154148015610ef95750846007600083815260200190815260200160002060010154145b15610fbc57600760008281526020019081526020016000206002018054610f1f90612194565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4b90612194565b8015610f985780601f10610f6d57610100808354040283529160200191610f98565b820191906000526020600020905b815481529060010190602001808311610f7b57829003601f168201915b5050505050838381518110610fb057610faf61229e565b5b60200260200101819052505b8180610fc7906121f7565b9250508080610fd5906121f7565b915050610eb5565b50819250505092915050565b606060046000838152602001908152602001600020600101805461100c90612194565b80601f016020809104026020016040519081016040528092919081815260200182805461103890612194565b80156110855780601f1061105a57610100808354040283529160200191611085565b820191906000526020600020905b81548152906001019060200180831161106857829003601f168201915b50505050509050919050565b60006040518060400160405280838152602001848152506005600060015481526020019081526020016000206000820151816000015560208201518160010190805190602001906110e392919061196b565b50905050600160008154809291906110fa906121f7565b9190505550600154905092915050565b60006040518060600160405280858152602001848152602001838152506007600060035481526020019081526020016000206000820151816000015560208201518160010155604082015181600201908051906020019061116c92919061196b565b5090505060036000815480929190611183906121f7565b919050555060035490509392505050565b816004600085815260200190815260200160002060000190805190602001906111be92919061196b565b50806004600085815260200190815260200160002060010190805190602001906111e992919061196b565b50505050565b606060066000838152602001908152602001600020600101805461121290612194565b80601f016020809104026020016040519081016040528092919081815260200182805461123e90612194565b801561128b5780601f106112605761010080835404028352916020019161128b565b820191906000526020600020905b81548152906001019060200180831161126e57829003601f168201915b50505050509050919050565b6060600060025467ffffffffffffffff8111156112b7576112b66122cd565b5b6040519080825280602002602001820160405280156112ea57816020015b60608152602001906001900390816112d55790505b50905060005b6002548110156113ca5760066000828152602001908152602001600020600101805461131b90612194565b80601f016020809104026020016040519081016040528092919081815260200182805461134790612194565b80156113945780601f1061136957610100808354040283529160200191611394565b820191906000526020600020905b81548152906001019060200180831161137757829003601f168201915b50505050508282815181106113ac576113ab61229e565b5b602002602001018190525080806113c2906121f7565b9150506112f0565b508091505090565b600080600090505b6002548110156114395782805190602001206006600083815260200190815260200160002060010160405161140f9190611f3c565b60405180910390201415611426578091505061143f565b8080611431906121f7565b9150506113da565b50600090505b919050565b600080600090505b6002548110156114c1578280519060200120600660008381526020019081526020016000206001016040516114819190611f3c565b604051809103902014156114ae5760066000828152602001908152602001600020600001549150506114c7565b80806114b9906121f7565b91505061144c565b50600090505b919050565b6000808190555060006001819055506000600281905550600060038190555060005b60005481101561155157600460008281526020019081526020016000206000808201600061151c91906119f1565b60018201600061152c91906119f1565b60028201600061153c91906119f1565b50508080611549906121f7565b9150506114ee565b5060005b6001548110156115a0576005600082815260200190815260200160002060008082016000905560018201600061158b91906119f1565b50508080611598906121f7565b915050611555565b5060005b6002548110156115ef57600660008281526020019081526020016000206000808201600090556001820160006115da91906119f1565b505080806115e7906121f7565b9150506115a4565b5060005b6003548110156116465760076000828152602001908152602001600020600080820160009055600182016000905560028201600061163191906119f1565b5050808061163e906121f7565b9150506115f3565b50565b8060066000848152602001908152602001600020600101908051906020019061167392919061196b565b505050565b60606000805467ffffffffffffffff811115611697576116966122cd565b5b6040519080825280602002602001820160405280156116ca57816020015b60608152602001906001900390816116b55790505b50905060005b6000548110156117aa576004600082815260200190815260200160002060010180546116fb90612194565b80601f016020809104026020016040519081016040528092919081815260200182805461172790612194565b80156117745780601f1061174957610100808354040283529160200191611774565b820191906000526020600020905b81548152906001019060200180831161175757829003601f168201915b505050505082828151811061178c5761178b61229e565b5b602002602001018190525080806117a2906121f7565b9150506116d0565b508091505090565b806005600084815260200190815260200160002060010190805190602001906117dc92919061196b565b505050565b600060405180606001604052808481526020018381526020016040518060400160405280600581526020017f46616c73650000000000000000000000000000000000000000000000000000008152508152506004600080548152602001908152602001600020600082015181600001908051906020019061186392919061196b565b50602082015181600101908051906020019061188092919061196b565b50604082015181600201908051906020019061189d92919061196b565b509050506000808154809291906118b3906121f7565b9190505550600054905092915050565b60606005600083815260200190815260200160002060010180546118e690612194565b80601f016020809104026020016040519081016040528092919081815260200182805461191290612194565b801561195f5780601f106119345761010080835404028352916020019161195f565b820191906000526020600020905b81548152906001019060200180831161194257829003601f168201915b50505050509050919050565b82805461197790612194565b90600052602060002090601f01602090048101928261199957600085556119e0565b82601f106119b257805160ff19168380011785556119e0565b828001600101855582156119e0579182015b828111156119df5782518255916020019190600101906119c4565b5b5090506119ed9190611a31565b5090565b5080546119fd90612194565b6000825580601f10611a0f5750611a2e565b601f016020900490600052602060002090810190611a2d9190611a31565b5b50565b5b80821115611a4a576000816000905550600101611a32565b5090565b6000611a61611a5c84612091565b61206c565b905082815260208101848484011115611a7d57611a7c612301565b5b611a88848285612152565b509392505050565b600082601f830112611aa557611aa46122fc565b5b8135611ab5848260208601611a4e565b91505092915050565b600081359050611acd81612321565b92915050565b600060208284031215611ae957611ae861230b565b5b600082013567ffffffffffffffff811115611b0757611b06612306565b5b611b1384828501611a90565b91505092915050565b60008060408385031215611b3357611b3261230b565b5b600083013567ffffffffffffffff811115611b5157611b50612306565b5b611b5d85828601611a90565b925050602083013567ffffffffffffffff811115611b7e57611b7d612306565b5b611b8a85828601611a90565b9150509250929050565b60008060408385031215611bab57611baa61230b565b5b600083013567ffffffffffffffff811115611bc957611bc8612306565b5b611bd585828601611a90565b9250506020611be685828601611abe565b9150509250929050565b600060208284031215611c0657611c0561230b565b5b6000611c1484828501611abe565b91505092915050565b60008060408385031215611c3457611c3361230b565b5b6000611c4285828601611abe565b925050602083013567ffffffffffffffff811115611c6357611c62612306565b5b611c6f85828601611a90565b9150509250929050565b600080600060608486031215611c9257611c9161230b565b5b6000611ca086828701611abe565b935050602084013567ffffffffffffffff811115611cc157611cc0612306565b5b611ccd86828701611a90565b925050604084013567ffffffffffffffff811115611cee57611ced612306565b5b611cfa86828701611a90565b9150509250925092565b60008060408385031215611d1b57611d1a61230b565b5b6000611d2985828601611abe565b9250506020611d3a85828601611abe565b9150509250929050565b600080600060608486031215611d5d57611d5c61230b565b5b6000611d6b86828701611abe565b9350506020611d7c86828701611abe565b925050604084013567ffffffffffffffff811115611d9d57611d9c612306565b5b611da986828701611a90565b9150509250925092565b6000611dbf8383611ebb565b905092915050565b6000611dd2826120e7565b611ddc818561210a565b935083602082028501611dee856120c2565b8060005b85811015611e2a5784840389528151611e0b8582611db3565b9450611e16836120fd565b925060208a01995050600181019050611df2565b50829750879550505050505092915050565b60008154611e4981612194565b611e53818661211b565b94506001821660008114611e6e5760018114611e7f57611eb2565b60ff19831686528186019350611eb2565b611e88856120d2565b60005b83811015611eaa57815481890152600182019150602081019050611e8b565b838801955050505b50505092915050565b6000611ec6826120f2565b611ed08185612126565b9350611ee0818560208601612161565b611ee981612310565b840191505092915050565b6000611eff826120f2565b611f098185612137565b9350611f19818560208601612161565b611f2281612310565b840191505092915050565b611f3681612148565b82525050565b6000611f488284611e3c565b915081905092915050565b60006020820190508181036000830152611f6d8184611dc7565b905092915050565b60006020820190508181036000830152611f8f8184611ef4565b905092915050565b60006060820190508181036000830152611fb18186611ef4565b90508181036020830152611fc58185611ef4565b90508181036040830152611fd98184611ef4565b9050949350505050565b6000602082019050611ff86000830184611f2d565b92915050565b60006040820190506120136000830185611f2d565b81810360208301526120258184611ef4565b90509392505050565b60006060820190506120436000830186611f2d565b6120506020830185611f2d565b81810360408301526120628184611ef4565b9050949350505050565b6000612076612087565b905061208282826121c6565b919050565b6000604051905090565b600067ffffffffffffffff8211156120ac576120ab6122cd565b5b6120b582612310565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561217f578082015181840152602081019050612164565b8381111561218e576000848401525b50505050565b600060028204905060018216806121ac57607f821691505b602082108114156121c0576121bf61226f565b5b50919050565b6121cf82612310565b810181811067ffffffffffffffff821117156121ee576121ed6122cd565b5b80604052505050565b600061220282612148565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561223557612234612240565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61232a81612148565b811461233557600080fd5b5056fea26469706673582212203cb0f25cdab881faad3f80d694ef0e6c8afc203623366b87a3672adfe516dc2b64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c806382fcc732116100c3578063b16060a61161007c578063b16060a614610478578063c04e743014610482578063c04fe9781461049e578063c29595c5146104bc578063c4c2e364146104d8578063e32acc1a1461050857610158565b806382fcc7321461037e578063881de858146103ae5780638d3d2595146103ca57806397ee7606146103fa578063a1ca917814610418578063aa4cdf2a1461044857610158565b80632d9cb1ab116101155780632d9cb1ab1461026f5780634162169f1461029f578063468d0c80146102bd5780634be7adb5146102ee5780635d907da11461031e57806371085cab1461034e57610158565b8063109ac9701461015d578063131d44f21461018d5780631ba44c4c146101bd5780631e9ac9f5146101ef57806327a568b91461021f57806329b56f6014610251575b600080fd5b61017760048036038101906101729190611bf0565b610538565b6040516101849190611f53565b60405180910390f35b6101a760048036038101906101a29190611bf0565b6106a8565b6040516101b49190611f53565b60405180910390f35b6101d760048036038101906101d29190611bf0565b610818565b6040516101e69392919061202e565b60405180910390f35b61020960048036038101906102049190611ad3565b6108ca565b6040516102169190611fe3565b60405180910390f35b61023960048036038101906102349190611bf0565b61093c565b60405161024893929190611f97565b60405180910390f35b610259610afe565b6040516102669190611f53565b60405180910390f35b61028960048036038101906102849190611b94565b610c39565b6040516102969190611fe3565b60405180910390f35b6102a7610cb2565b6040516102b49190611f53565b60405180910390f35b6102d760048036038101906102d29190611bf0565b610dab565b6040516102e5929190611ffe565b60405180910390f35b61030860048036038101906103039190611d04565b610e57565b6040516103159190611f53565b60405180910390f35b61033860048036038101906103339190611bf0565b610fe9565b6040516103459190611f75565b60405180910390f35b61036860048036038101906103639190611b94565b611091565b6040516103759190611fe3565b60405180910390f35b61039860048036038101906103939190611d44565b61110a565b6040516103a59190611fe3565b60405180910390f35b6103c860048036038101906103c39190611c79565b611194565b005b6103e460048036038101906103df9190611bf0565b6111ef565b6040516103f19190611f75565b60405180910390f35b610402611297565b60405161040f9190611f53565b60405180910390f35b610432600480360381019061042d9190611ad3565b6113d2565b60405161043f9190611fe3565b60405180910390f35b610462600480360381019061045d9190611ad3565b611444565b60405161046f9190611fe3565b60405180910390f35b6104806114cc565b005b61049c60048036038101906104979190611c1d565b611649565b005b6104a6611678565b6040516104b39190611f53565b60405180910390f35b6104d660048036038101906104d19190611c1d565b6117b2565b005b6104f260048036038101906104ed9190611b1c565b6117e1565b6040516104ff9190611fe3565b60405180910390f35b610522600480360381019061051d9190611bf0565b6118c3565b60405161052f9190611f75565b60405180910390f35b6060600060015467ffffffffffffffff811115610558576105576122cd565b5b60405190808252806020026020018201604052801561058b57816020015b60608152602001906001900390816105765790505b509050600080600090505b60015481101561069d57846005600083815260200190815260200160002060000154141561068a576005600082815260200190815260200160002060010180546105df90612194565b80601f016020809104026020016040519081016040528092919081815260200182805461060b90612194565b80156106585780601f1061062d57610100808354040283529160200191610658565b820191906000526020600020905b81548152906001019060200180831161063b57829003601f168201915b50505050508383815181106106705761066f61229e565b5b60200260200101819052508180610686906121f7565b9250505b8080610695906121f7565b915050610596565b508192505050919050565b6060600060025467ffffffffffffffff8111156106c8576106c76122cd565b5b6040519080825280602002602001820160405280156106fb57816020015b60608152602001906001900390816106e65790505b509050600080600090505b60025481101561080d5784600660008381526020019081526020016000206000015414156107ec5760066000828152602001908152602001600020600101805461074f90612194565b80601f016020809104026020016040519081016040528092919081815260200182805461077b90612194565b80156107c85780601f1061079d576101008083540402835291602001916107c8565b820191906000526020600020905b8154815290600101906020018083116107ab57829003601f168201915b50505050508383815181106107e0576107df61229e565b5b60200260200101819052505b81806107f7906121f7565b9250508080610805906121f7565b915050610706565b508192505050919050565b600760205280600052604060002060009150905080600001549080600101549080600201805461084790612194565b80601f016020809104026020016040519081016040528092919081815260200182805461087390612194565b80156108c05780601f10610895576101008083540402835291602001916108c0565b820191906000526020600020905b8154815290600101906020018083116108a357829003601f168201915b5050505050905083565b600080600090505b600154811015610931578280519060200120600560008381526020019081526020016000206001016040516109079190611f3c565b6040518091039020141561091e5780915050610937565b8080610929906121f7565b9150506108d2565b50600090505b919050565b600460205280600052604060002060009150905080600001805461095f90612194565b80601f016020809104026020016040519081016040528092919081815260200182805461098b90612194565b80156109d85780601f106109ad576101008083540402835291602001916109d8565b820191906000526020600020905b8154815290600101906020018083116109bb57829003601f168201915b5050505050908060010180546109ed90612194565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1990612194565b8015610a665780601f10610a3b57610100808354040283529160200191610a66565b820191906000526020600020905b815481529060010190602001808311610a4957829003601f168201915b505050505090806002018054610a7b90612194565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa790612194565b8015610af45780601f10610ac957610100808354040283529160200191610af4565b820191906000526020600020905b815481529060010190602001808311610ad757829003601f168201915b5050505050905083565b6060600060015467ffffffffffffffff811115610b1e57610b1d6122cd565b5b604051908082528060200260200182016040528015610b5157816020015b6060815260200190600190039081610b3c5790505b50905060005b600154811015610c3157600560008281526020019081526020016000206001018054610b8290612194565b80601f0160208091040260200160405190810160405280929190818152602001828054610bae90612194565b8015610bfb5780601f10610bd057610100808354040283529160200191610bfb565b820191906000526020600020905b815481529060010190602001808311610bde57829003601f168201915b5050505050828281518110610c1357610c1261229e565b5b60200260200101819052508080610c29906121f7565b915050610b57565b508091505090565b6000604051806040016040528083815260200184815250600660006002548152602001908152602001600020600082015181600001556020820151816001019080519060200190610c8b92919061196b565b5090505060026000815480929190610ca2906121f7565b9190505550600254905092915050565b6060610d286040518060400160405280600981526020017f77616c6c657420233100000000000000000000000000000000000000000000008152506040518060400160405280600f81526020017f44414f206d6574616461746120233100000000000000000000000000000000008152506117e1565b50610d9d6040518060400160405280600981526020017f77616c6c657420233200000000000000000000000000000000000000000000008152506040518060400160405280600f81526020017f44414f206d6574616461746120233200000000000000000000000000000000008152506117e1565b50610da6611678565b905090565b6006602052806000526040600020600091509050806000015490806001018054610dd490612194565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0090612194565b8015610e4d5780601f10610e2257610100808354040283529160200191610e4d565b820191906000526020600020905b815481529060010190602001808311610e3057829003601f168201915b5050505050905082565b6060600060035467ffffffffffffffff811115610e7757610e766122cd565b5b604051908082528060200260200182016040528015610eaa57816020015b6060815260200190600190039081610e955790505b509050600080600090505b600354811015610fdd57856007600083815260200190815260200160002060000154148015610ef95750846007600083815260200190815260200160002060010154145b15610fbc57600760008281526020019081526020016000206002018054610f1f90612194565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4b90612194565b8015610f985780601f10610f6d57610100808354040283529160200191610f98565b820191906000526020600020905b815481529060010190602001808311610f7b57829003601f168201915b5050505050838381518110610fb057610faf61229e565b5b60200260200101819052505b8180610fc7906121f7565b9250508080610fd5906121f7565b915050610eb5565b50819250505092915050565b606060046000838152602001908152602001600020600101805461100c90612194565b80601f016020809104026020016040519081016040528092919081815260200182805461103890612194565b80156110855780601f1061105a57610100808354040283529160200191611085565b820191906000526020600020905b81548152906001019060200180831161106857829003601f168201915b50505050509050919050565b60006040518060400160405280838152602001848152506005600060015481526020019081526020016000206000820151816000015560208201518160010190805190602001906110e392919061196b565b50905050600160008154809291906110fa906121f7565b9190505550600154905092915050565b60006040518060600160405280858152602001848152602001838152506007600060035481526020019081526020016000206000820151816000015560208201518160010155604082015181600201908051906020019061116c92919061196b565b5090505060036000815480929190611183906121f7565b919050555060035490509392505050565b816004600085815260200190815260200160002060000190805190602001906111be92919061196b565b50806004600085815260200190815260200160002060010190805190602001906111e992919061196b565b50505050565b606060066000838152602001908152602001600020600101805461121290612194565b80601f016020809104026020016040519081016040528092919081815260200182805461123e90612194565b801561128b5780601f106112605761010080835404028352916020019161128b565b820191906000526020600020905b81548152906001019060200180831161126e57829003601f168201915b50505050509050919050565b6060600060025467ffffffffffffffff8111156112b7576112b66122cd565b5b6040519080825280602002602001820160405280156112ea57816020015b60608152602001906001900390816112d55790505b50905060005b6002548110156113ca5760066000828152602001908152602001600020600101805461131b90612194565b80601f016020809104026020016040519081016040528092919081815260200182805461134790612194565b80156113945780601f1061136957610100808354040283529160200191611394565b820191906000526020600020905b81548152906001019060200180831161137757829003601f168201915b50505050508282815181106113ac576113ab61229e565b5b602002602001018190525080806113c2906121f7565b9150506112f0565b508091505090565b600080600090505b6002548110156114395782805190602001206006600083815260200190815260200160002060010160405161140f9190611f3c565b60405180910390201415611426578091505061143f565b8080611431906121f7565b9150506113da565b50600090505b919050565b600080600090505b6002548110156114c1578280519060200120600660008381526020019081526020016000206001016040516114819190611f3c565b604051809103902014156114ae5760066000828152602001908152602001600020600001549150506114c7565b80806114b9906121f7565b91505061144c565b50600090505b919050565b6000808190555060006001819055506000600281905550600060038190555060005b60005481101561155157600460008281526020019081526020016000206000808201600061151c91906119f1565b60018201600061152c91906119f1565b60028201600061153c91906119f1565b50508080611549906121f7565b9150506114ee565b5060005b6001548110156115a0576005600082815260200190815260200160002060008082016000905560018201600061158b91906119f1565b50508080611598906121f7565b915050611555565b5060005b6002548110156115ef57600660008281526020019081526020016000206000808201600090556001820160006115da91906119f1565b505080806115e7906121f7565b9150506115a4565b5060005b6003548110156116465760076000828152602001908152602001600020600080820160009055600182016000905560028201600061163191906119f1565b5050808061163e906121f7565b9150506115f3565b50565b8060066000848152602001908152602001600020600101908051906020019061167392919061196b565b505050565b60606000805467ffffffffffffffff811115611697576116966122cd565b5b6040519080825280602002602001820160405280156116ca57816020015b60608152602001906001900390816116b55790505b50905060005b6000548110156117aa576004600082815260200190815260200160002060010180546116fb90612194565b80601f016020809104026020016040519081016040528092919081815260200182805461172790612194565b80156117745780601f1061174957610100808354040283529160200191611774565b820191906000526020600020905b81548152906001019060200180831161175757829003601f168201915b505050505082828151811061178c5761178b61229e565b5b602002602001018190525080806117a2906121f7565b9150506116d0565b508091505090565b806005600084815260200190815260200160002060010190805190602001906117dc92919061196b565b505050565b600060405180606001604052808481526020018381526020016040518060400160405280600581526020017f46616c73650000000000000000000000000000000000000000000000000000008152508152506004600080548152602001908152602001600020600082015181600001908051906020019061186392919061196b565b50602082015181600101908051906020019061188092919061196b565b50604082015181600201908051906020019061189d92919061196b565b509050506000808154809291906118b3906121f7565b9190505550600054905092915050565b60606005600083815260200190815260200160002060010180546118e690612194565b80601f016020809104026020016040519081016040528092919081815260200182805461191290612194565b801561195f5780601f106119345761010080835404028352916020019161195f565b820191906000526020600020905b81548152906001019060200180831161194257829003601f168201915b50505050509050919050565b82805461197790612194565b90600052602060002090601f01602090048101928261199957600085556119e0565b82601f106119b257805160ff19168380011785556119e0565b828001600101855582156119e0579182015b828111156119df5782518255916020019190600101906119c4565b5b5090506119ed9190611a31565b5090565b5080546119fd90612194565b6000825580601f10611a0f5750611a2e565b601f016020900490600052602060002090810190611a2d9190611a31565b5b50565b5b80821115611a4a576000816000905550600101611a32565b5090565b6000611a61611a5c84612091565b61206c565b905082815260208101848484011115611a7d57611a7c612301565b5b611a88848285612152565b509392505050565b600082601f830112611aa557611aa46122fc565b5b8135611ab5848260208601611a4e565b91505092915050565b600081359050611acd81612321565b92915050565b600060208284031215611ae957611ae861230b565b5b600082013567ffffffffffffffff811115611b0757611b06612306565b5b611b1384828501611a90565b91505092915050565b60008060408385031215611b3357611b3261230b565b5b600083013567ffffffffffffffff811115611b5157611b50612306565b5b611b5d85828601611a90565b925050602083013567ffffffffffffffff811115611b7e57611b7d612306565b5b611b8a85828601611a90565b9150509250929050565b60008060408385031215611bab57611baa61230b565b5b600083013567ffffffffffffffff811115611bc957611bc8612306565b5b611bd585828601611a90565b9250506020611be685828601611abe565b9150509250929050565b600060208284031215611c0657611c0561230b565b5b6000611c1484828501611abe565b91505092915050565b60008060408385031215611c3457611c3361230b565b5b6000611c4285828601611abe565b925050602083013567ffffffffffffffff811115611c6357611c62612306565b5b611c6f85828601611a90565b9150509250929050565b600080600060608486031215611c9257611c9161230b565b5b6000611ca086828701611abe565b935050602084013567ffffffffffffffff811115611cc157611cc0612306565b5b611ccd86828701611a90565b925050604084013567ffffffffffffffff811115611cee57611ced612306565b5b611cfa86828701611a90565b9150509250925092565b60008060408385031215611d1b57611d1a61230b565b5b6000611d2985828601611abe565b9250506020611d3a85828601611abe565b9150509250929050565b600080600060608486031215611d5d57611d5c61230b565b5b6000611d6b86828701611abe565b9350506020611d7c86828701611abe565b925050604084013567ffffffffffffffff811115611d9d57611d9c612306565b5b611da986828701611a90565b9150509250925092565b6000611dbf8383611ebb565b905092915050565b6000611dd2826120e7565b611ddc818561210a565b935083602082028501611dee856120c2565b8060005b85811015611e2a5784840389528151611e0b8582611db3565b9450611e16836120fd565b925060208a01995050600181019050611df2565b50829750879550505050505092915050565b60008154611e4981612194565b611e53818661211b565b94506001821660008114611e6e5760018114611e7f57611eb2565b60ff19831686528186019350611eb2565b611e88856120d2565b60005b83811015611eaa57815481890152600182019150602081019050611e8b565b838801955050505b50505092915050565b6000611ec6826120f2565b611ed08185612126565b9350611ee0818560208601612161565b611ee981612310565b840191505092915050565b6000611eff826120f2565b611f098185612137565b9350611f19818560208601612161565b611f2281612310565b840191505092915050565b611f3681612148565b82525050565b6000611f488284611e3c565b915081905092915050565b60006020820190508181036000830152611f6d8184611dc7565b905092915050565b60006020820190508181036000830152611f8f8184611ef4565b905092915050565b60006060820190508181036000830152611fb18186611ef4565b90508181036020830152611fc58185611ef4565b90508181036040830152611fd98184611ef4565b9050949350505050565b6000602082019050611ff86000830184611f2d565b92915050565b60006040820190506120136000830185611f2d565b81810360208301526120258184611ef4565b90509392505050565b60006060820190506120436000830186611f2d565b6120506020830185611f2d565b81810360408301526120628184611ef4565b9050949350505050565b6000612076612087565b905061208282826121c6565b919050565b6000604051905090565b600067ffffffffffffffff8211156120ac576120ab6122cd565b5b6120b582612310565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561217f578082015181840152602081019050612164565b8381111561218e576000848401525b50505050565b600060028204905060018216806121ac57607f821691505b602082108114156121c0576121bf61226f565b5b50919050565b6121cf82612310565b810181811067ffffffffffffffff821117156121ee576121ed6122cd565b5b80604052505050565b600061220282612148565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561223557612234612240565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61232a81612148565b811461233557600080fd5b5056fea26469706673582212203cb0f25cdab881faad3f80d694ef0e6c8afc203623366b87a3672adfe516dc2b64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1068,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_dao_ids",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1070,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_goal_ids",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1072,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_ideas_ids",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1074,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_ideas_vote_ids",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1079,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_dao_uris",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(dao_uri_struct)1049_storage)"
      },
      {
        "astId": 1084,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_goal_uris",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(goal_uri_struct)1054_storage)"
      },
      {
        "astId": 1089,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "_ideas_uris",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(ideas_uri_struct)1059_storage)"
      },
      {
        "astId": 1094,
        "contract": "contracts/GreenDAO.sol:GreenDAO",
        "label": "all_goal_ideas_votes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(goal_ideas_votes_struct)1066_storage)"
      }
    ],
    "types": {
      "t_mapping(t_uint256,t_struct(dao_uri_struct)1049_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.dao_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(dao_uri_struct)1049_storage"
      },
      "t_mapping(t_uint256,t_struct(goal_ideas_votes_struct)1066_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.goal_ideas_votes_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(goal_ideas_votes_struct)1066_storage"
      },
      "t_mapping(t_uint256,t_struct(goal_uri_struct)1054_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.goal_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(goal_uri_struct)1054_storage"
      },
      "t_mapping(t_uint256,t_struct(ideas_uri_struct)1059_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GreenDAO.ideas_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(ideas_uri_struct)1059_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(dao_uri_struct)1049_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.dao_uri_struct",
        "members": [
          {
            "astId": 1044,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "dao_wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1046,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "dao_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1048,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "finished",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(goal_ideas_votes_struct)1066_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.goal_ideas_votes_struct",
        "members": [
          {
            "astId": 1061,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "goal_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1063,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1065,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "wallet",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(goal_uri_struct)1054_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.goal_uri_struct",
        "members": [
          {
            "astId": 1051,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "dao_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1053,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "goal_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ideas_uri_struct)1059_storage": {
        "encoding": "inplace",
        "label": "struct GreenDAO.ideas_uri_struct",
        "members": [
          {
            "astId": 1056,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "goal_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1058,
            "contract": "contracts/GreenDAO.sol:GreenDAO",
            "label": "ideas_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}